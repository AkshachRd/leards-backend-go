// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/accounts": {
            "get": {
                "security": [
                    {
                        "BasicAuth": []
                    }
                ],
                "description": "returns the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Login the user",
                "operationId": "loginUser",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    }
                }
            },
            "post": {
                "description": "creates a new user and returns a token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Register a new user",
                "operationId": "registerNewUser",
                "parameters": [
                    {
                        "description": "User register data",
                        "name": "createUserData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    }
                }
            }
        },
        "/accounts/{user_id}": {
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "updates the user in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "Updates the user by id",
                "operationId": "UpdateUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update user data",
                        "name": "updateUserData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    }
                }
            }
        },
        "/accounts/{user_id}/avatar": {
            "get": {
                "description": "returns the user's avatar",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "image/png",
                    "images/jpg",
                    "image/jpeg",
                    "image/gif"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "get avatar by user id",
                "operationId": "getAvatarByUserId",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "updates the user's avatar",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "accounts"
                ],
                "summary": "upload avatar by user id",
                "operationId": "uploadAvatarByUserId",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Avatar image file (JPG, JPEG, PNG, or GIF)",
                        "name": "avatar",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    }
                }
            }
        },
        "/accounts/{user_id}/settings": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "fetches the user settings from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "userSettings"
                ],
                "summary": "Get the user settings",
                "operationId": "getUserSettings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserSettingsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "updates the user settings in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "userSettings"
                ],
                "summary": "Update the user settings",
                "operationId": "updateUserSettings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update user settings data",
                        "name": "updateUserSettingsData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateUserSettingsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/UserSettingsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    }
                }
            }
        },
        "/auth/{user_id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "when token is expired you need to refresh it",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Refresh user's token",
                "operationId": "refreshToken",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/TokenResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    },
                    "403": {
                        "description": "Forbidden",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "when user signs out token needs to be revoked",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Revokes user's token",
                "operationId": "revokeToken",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BasicResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    }
                }
            }
        },
        "/folders": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "creates a new folder in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "folders"
                ],
                "summary": "Create a new folder",
                "operationId": "createNewFolder",
                "parameters": [
                    {
                        "description": "Create folder data",
                        "name": "createFolderData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateDeckRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FolderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    }
                }
            }
        },
        "/folders/{folder_id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "fetches the folder from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "folders"
                ],
                "summary": "Get the folder by id",
                "operationId": "getFolderById",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folder_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FolderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "updates the folder in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "folders"
                ],
                "summary": "Update the folder by id",
                "operationId": "updateFolderById",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folder_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update folder data",
                        "name": "updateFolderData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateFolderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/FolderResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "deletes the folder in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "folders"
                ],
                "summary": "Delete the folder by id",
                "operationId": "deleteFolderById",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folder_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    }
                }
            }
        },
        "/folders/{folder_id}/decks": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "creates a new deck in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "decks"
                ],
                "summary": "Create a new deck",
                "operationId": "createNewDeck",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folder_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Create deck data",
                        "name": "createDeckData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateDeckRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DeckResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    }
                }
            }
        },
        "/folders/{folder_id}/decks/{deck_id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "fetches the deck from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "decks"
                ],
                "summary": "Get the deck by id",
                "operationId": "getDeckById",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folder_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Deck ID",
                        "name": "deck_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DeckResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "updates the deck in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "decks"
                ],
                "summary": "Updates the deck by id",
                "operationId": "updateDeckById",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folder_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Deck ID",
                        "name": "deck_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Update deck data",
                        "name": "updateDeckData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateDeckRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/DeckResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "deletes the deck in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "decks"
                ],
                "summary": "Delete the deck by id",
                "operationId": "deleteDeckById",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folder_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Deck ID",
                        "name": "deck_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    }
                }
            }
        },
        "/folders/{folder_id}/decks/{deck_id}/cards": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "fetches cards of the deck from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cards"
                ],
                "summary": "Get all deck's cards",
                "operationId": "getCardsByDeckId",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folder_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Deck ID",
                        "name": "deck_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/CardsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "adds card without id, updates card with id, deletes card if it's not presented inside the request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "cards"
                ],
                "summary": "Synchronizes cards",
                "operationId": "syncCardsByDeckId",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Folder ID",
                        "name": "folder_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Deck ID",
                        "name": "deck_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Sync cards data",
                        "name": "syncCardsRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/SyncCardsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/BasicResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "BasicResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Successfully"
                }
            }
        },
        "Card": {
            "type": "object",
            "properties": {
                "backSide": {
                    "type": "string"
                },
                "cardId": {
                    "type": "string"
                },
                "frontSide": {
                    "type": "string"
                }
            }
        },
        "CardsResponse": {
            "type": "object",
            "properties": {
                "cards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Card"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Successfully"
                }
            }
        },
        "Content": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "CreateDeckRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string",
                    "example": "My new folder"
                },
                "parentFolderId": {
                    "type": "string",
                    "example": "72a30ffb-1896-48b1-b006-985fb055db0f"
                }
            }
        },
        "CreateUserRequest": {
            "type": "object",
            "required": [
                "email",
                "password",
                "username"
            ],
            "properties": {
                "email": {
                    "type": "string",
                    "example": "bob@leards.space"
                },
                "password": {
                    "type": "string",
                    "example": "123"
                },
                "username": {
                    "type": "string",
                    "example": "Bob"
                }
            }
        },
        "Deck": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Card"
                    }
                },
                "deckId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "DeckResponse": {
            "type": "object",
            "properties": {
                "deck": {
                    "$ref": "#/definitions/Deck"
                },
                "message": {
                    "type": "string",
                    "example": "Successfully"
                }
            }
        },
        "Folder": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Content"
                    }
                },
                "folderId": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "path": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Path"
                    }
                }
            }
        },
        "FolderResponse": {
            "type": "object",
            "properties": {
                "folder": {
                    "$ref": "#/definitions/Folder"
                },
                "message": {
                    "type": "string",
                    "example": "Successfully"
                }
            }
        },
        "HTTPError": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer",
                    "example": 400
                },
                "message": {
                    "type": "string",
                    "example": "status bad request"
                }
            }
        },
        "Path": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "Settings": {
            "type": "object",
            "additionalProperties": {
                "type": "string"
            }
        },
        "SyncCardsRequest": {
            "type": "object",
            "required": [
                "cards"
            ],
            "properties": {
                "cards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Card"
                    }
                }
            }
        },
        "TokenResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Successfully"
                },
                "token": {
                    "type": "string",
                    "example": "\u003ctoken\u003e"
                }
            }
        },
        "UpdateDeckRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "accessType": {
                    "type": "string",
                    "example": "public"
                },
                "name": {
                    "type": "string",
                    "example": "My new deck"
                }
            }
        },
        "UpdateFolderRequest": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "accessType": {
                    "type": "string",
                    "example": "public"
                },
                "name": {
                    "type": "string",
                    "example": "My new folder"
                }
            }
        },
        "UpdateUserRequest": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "rostislav.glizerin@ispring.com"
                },
                "name": {
                    "type": "string",
                    "example": "Ivan"
                },
                "password": {
                    "type": "string",
                    "example": "qwerty123"
                }
            }
        },
        "UpdateUserSettingsRequest": {
            "type": "object",
            "required": [
                "settings"
            ],
            "properties": {
                "settings": {
                    "$ref": "#/definitions/Settings"
                }
            }
        },
        "User": {
            "type": "object",
            "properties": {
                "authToken": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "profileIcon": {
                    "type": "string"
                },
                "rootFolderId": {
                    "type": "string"
                },
                "settings": {
                    "$ref": "#/definitions/Settings"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "UserResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Successfully"
                },
                "user": {
                    "$ref": "#/definitions/User"
                }
            }
        },
        "UserSettingsResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Successfully"
                },
                "settings": {
                    "$ref": "#/definitions/Settings"
                }
            }
        }
    },
    "securityDefinitions": {
        "BasicAuth": {
            "type": "basic"
        },
        "Bearer": {
            "description": "ATTENTION! HOW TO USE: Type \"Bearer\" followed by a space and a token. Example: \"Bearer \\\u003ctoken\\\u003e\".",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    },
    "externalDocs": {
        "description": "OpenAPI",
        "url": "https://swagger.io/resources/open-api/"
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Leards Backend API",
	Description:      "This is a leards language learning app api.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
