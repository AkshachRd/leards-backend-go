basePath: /api/v1
definitions:
  httputils.BasicResponse:
    properties:
      message:
        example: Successfully
        type: string
    type: object
  httputils.Card:
    properties:
      backSide:
        type: string
      cardId:
        type: string
      frontSide:
        type: string
    type: object
  httputils.Content:
    properties:
      id:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  httputils.CreateUserRequest:
    properties:
      email:
        example: bob@leards.space
        type: string
      password:
        example: "123"
        type: string
      username:
        example: Bob
        type: string
    required:
    - email
    - password
    - username
    type: object
  httputils.Deck:
    properties:
      content:
        items:
          $ref: '#/definitions/httputils.Card'
        type: array
      deckId:
        type: string
      name:
        type: string
    type: object
  httputils.DeckResponse:
    properties:
      deck:
        $ref: '#/definitions/httputils.Deck'
      message:
        example: Successfully
        type: string
    type: object
  httputils.Folder:
    properties:
      content:
        items:
          $ref: '#/definitions/httputils.Content'
        type: array
      folderId:
        type: string
      name:
        type: string
      path:
        items:
          $ref: '#/definitions/httputils.Path'
        type: array
    type: object
  httputils.FolderResponse:
    properties:
      folder:
        $ref: '#/definitions/httputils.Folder'
      message:
        example: Successfully
        type: string
    type: object
  httputils.HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  httputils.Path:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  httputils.TokenResponse:
    properties:
      message:
        example: Successfully
        type: string
      token:
        example: <token>
        type: string
    type: object
  httputils.UserResponse:
    properties:
      message:
        example: Successfully
        type: string
      token:
        example: <token>
        type: string
      userId:
        example: 53f4cf69-9da6-49e4-8651-450b74abdf9e
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a leards language learning app api.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Leards Backend API
  version: "1.0"
paths:
  /accounts:
    get:
      consumes:
      - application/json
      description: returns user id of an existing user
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/httputils.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      security:
      - BasicAuth: []
      summary: Login an existing user
      tags:
      - accounts
    post:
      consumes:
      - application/json
      description: creates new user and returns a token
      parameters:
      - description: User register data
        in: body
        name: createUserData
        required: true
        schema:
          $ref: '#/definitions/httputils.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/httputils.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      summary: Register new user
      tags:
      - accounts
  /auth/{id}:
    delete:
      consumes:
      - application/json
      description: when user signs out token needs to be revoked
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputils.BasicResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      security:
      - Bearer: []
      summary: Revokes user's token
      tags:
      - auth
    get:
      consumes:
      - application/json
      description: when token is expired you need to refresh it
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputils.TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      security:
      - Bearer: []
      summary: Refresh user's token
      tags:
      - auth
  /decks/{id}:
    get:
      consumes:
      - application/json
      description: fetches the deck from the database
      parameters:
      - description: Deck ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputils.DeckResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      security:
      - Bearer: []
      summary: Get single deck by id
      tags:
      - decks
  /folders/{id}:
    get:
      consumes:
      - application/json
      description: fetches the folder from the database
      parameters:
      - description: Folder ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/httputils.FolderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httputils.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/httputils.HTTPError'
      security:
      - Bearer: []
      summary: Get single folder by id
      tags:
      - folders
securityDefinitions:
  BasicAuth:
    type: basic
  Bearer:
    description: 'ATTENTION! HOW TO USE: Type "Bearer" followed by a space and a token.
      Example: "Bearer \<token\>".'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
