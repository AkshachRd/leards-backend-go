basePath: /api/v1
definitions:
  BasicResponse:
    properties:
      message:
        example: Successfully
        type: string
    type: object
  Card:
    properties:
      backSide:
        type: string
      cardId:
        type: string
      frontSide:
        type: string
    type: object
  CardsResponse:
    properties:
      cards:
        items:
          $ref: '#/definitions/Card'
        type: array
      message:
        example: Successfully
        type: string
    type: object
  Content:
    properties:
      id:
        type: string
      name:
        type: string
      type:
        type: string
    type: object
  CreateDeckRequest:
    properties:
      name:
        example: My new folder
        type: string
      parentFolderId:
        example: 72a30ffb-1896-48b1-b006-985fb055db0f
        type: string
    required:
    - name
    type: object
  CreateUserRequest:
    properties:
      email:
        example: bob@leards.space
        type: string
      password:
        example: "123"
        type: string
      username:
        example: Bob
        type: string
    required:
    - email
    - password
    - username
    type: object
  Deck:
    properties:
      content:
        items:
          $ref: '#/definitions/Card'
        type: array
      deckId:
        type: string
      name:
        type: string
    type: object
  DeckResponse:
    properties:
      deck:
        $ref: '#/definitions/Deck'
      message:
        example: Successfully
        type: string
    type: object
  Folder:
    properties:
      content:
        items:
          $ref: '#/definitions/Content'
        type: array
      folderId:
        type: string
      name:
        type: string
      path:
        items:
          $ref: '#/definitions/Path'
        type: array
    type: object
  FolderResponse:
    properties:
      folder:
        $ref: '#/definitions/Folder'
      message:
        example: Successfully
        type: string
    type: object
  HTTPError:
    properties:
      code:
        example: 400
        type: integer
      message:
        example: status bad request
        type: string
    type: object
  Path:
    properties:
      id:
        type: string
      name:
        type: string
    type: object
  Settings:
    additionalProperties:
      type: string
    type: object
  SyncCardsRequest:
    properties:
      cards:
        items:
          $ref: '#/definitions/Card'
        type: array
    required:
    - cards
    type: object
  TokenResponse:
    properties:
      message:
        example: Successfully
        type: string
      token:
        example: <token>
        type: string
    type: object
  UpdateDeckRequest:
    properties:
      accessType:
        example: public
        type: string
      name:
        example: My new deck
        type: string
    required:
    - accessType
    - name
    type: object
  UpdateFolderRequest:
    properties:
      accessType:
        example: public
        type: string
      name:
        example: My new folder
        type: string
    required:
    - accessType
    - name
    type: object
  User:
    properties:
      authToken:
        type: string
      email:
        type: string
      name:
        type: string
      profileIcon:
        type: string
      rootFolderId:
        type: string
      settings:
        $ref: '#/definitions/Settings'
      userId:
        type: string
    type: object
  UserResponse:
    properties:
      message:
        example: Successfully
        type: string
      user:
        $ref: '#/definitions/User'
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a leards language learning app api.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Leards Backend API
  version: "1.0"
paths:
  /accounts:
    get:
      consumes:
      - application/json
      description: returns the user
      operationId: loginUser
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/HTTPError'
      security:
      - BasicAuth: []
      summary: Login the  user
      tags:
      - accounts
    post:
      consumes:
      - application/json
      description: creates a new user and returns a token
      operationId: registerNewUser
      parameters:
      - description: User register data
        in: body
        name: createUserData
        required: true
        schema:
          $ref: '#/definitions/CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/HTTPError'
      summary: Register a new user
      tags:
      - accounts
  /auth/{user_id}:
    delete:
      consumes:
      - application/json
      description: when user signs out token needs to be revoked
      operationId: revokeToken
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/BasicResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/HTTPError'
      security:
      - Bearer: []
      summary: Revokes user's token
      tags:
      - auth
    get:
      consumes:
      - application/json
      description: when token is expired you need to refresh it
      operationId: refreshToken
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/TokenResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/HTTPError'
      security:
      - Bearer: []
      summary: Refresh user's token
      tags:
      - auth
  /folders:
    post:
      consumes:
      - application/json
      description: creates a new folder in the database
      operationId: createNewFolder
      parameters:
      - description: Create folder data
        in: body
        name: createFolderData
        required: true
        schema:
          $ref: '#/definitions/CreateDeckRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/FolderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/HTTPError'
      security:
      - Bearer: []
      summary: Create a new folder
      tags:
      - folders
  /folders/{folder_id}:
    delete:
      consumes:
      - application/json
      description: deletes the folder in the database
      operationId: deleteFolderById
      parameters:
      - description: Folder ID
        in: path
        name: folder_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/BasicResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPError'
      security:
      - Bearer: []
      summary: Delete the folder by id
      tags:
      - folders
    get:
      consumes:
      - application/json
      description: fetches the folder from the database
      operationId: getFolderById
      parameters:
      - description: Folder ID
        in: path
        name: folder_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/FolderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPError'
      security:
      - Bearer: []
      summary: Get the folder by id
      tags:
      - folders
    put:
      consumes:
      - application/json
      description: updates the folder in the database
      operationId: updateFolderById
      parameters:
      - description: Folder ID
        in: path
        name: folder_id
        required: true
        type: string
      - description: Update folder data
        in: body
        name: updateFolderData
        required: true
        schema:
          $ref: '#/definitions/UpdateFolderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/FolderResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPError'
      security:
      - Bearer: []
      summary: Update the folder by id
      tags:
      - folders
  /folders/{folder_id}/decks:
    post:
      consumes:
      - application/json
      description: creates a new deck in the database
      operationId: createNewDeck
      parameters:
      - description: Folder ID
        in: path
        name: folder_id
        required: true
        type: string
      - description: Create deck data
        in: body
        name: createDeckData
        required: true
        schema:
          $ref: '#/definitions/CreateDeckRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DeckResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/HTTPError'
      security:
      - Bearer: []
      summary: Create a new deck
      tags:
      - decks
  /folders/{folder_id}/decks/{deck_id}:
    delete:
      consumes:
      - application/json
      description: deletes the deck in the database
      operationId: deleteDeckById
      parameters:
      - description: Folder ID
        in: path
        name: folder_id
        required: true
        type: string
      - description: Deck ID
        in: path
        name: deck_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/BasicResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPError'
      security:
      - Bearer: []
      summary: Delete the deck by id
      tags:
      - decks
    get:
      consumes:
      - application/json
      description: fetches the deck from the database
      operationId: getDeckById
      parameters:
      - description: Folder ID
        in: path
        name: folder_id
        required: true
        type: string
      - description: Deck ID
        in: path
        name: deck_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DeckResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPError'
      security:
      - Bearer: []
      summary: Get the deck by id
      tags:
      - decks
    put:
      consumes:
      - application/json
      description: updates the deck in the database
      operationId: updateDeckById
      parameters:
      - description: Folder ID
        in: path
        name: folder_id
        required: true
        type: string
      - description: Deck ID
        in: path
        name: deck_id
        required: true
        type: string
      - description: Update deck data
        in: body
        name: updateDeckData
        required: true
        schema:
          $ref: '#/definitions/UpdateDeckRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/DeckResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/HTTPError'
      security:
      - Bearer: []
      summary: Updates the deck by id
      tags:
      - decks
  /folders/{folder_id}/decks/{deck_id}/cards:
    get:
      consumes:
      - application/json
      description: fetches cards of the deck from the database
      operationId: getCardsByDeckId
      parameters:
      - description: Folder ID
        in: path
        name: folder_id
        required: true
        type: string
      - description: Deck ID
        in: path
        name: deck_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CardsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/HTTPError'
      security:
      - Bearer: []
      summary: Get all deck's cards
      tags:
      - cards
    put:
      consumes:
      - application/json
      description: adds card without id, updates card with id, deletes card if it's
        not presented inside the request
      operationId: syncCardsByDeckId
      parameters:
      - description: Folder ID
        in: path
        name: folder_id
        required: true
        type: string
      - description: Deck ID
        in: path
        name: deck_id
        required: true
        type: string
      - description: Sync cards data
        in: body
        name: syncCardsRequest
        required: true
        schema:
          $ref: '#/definitions/SyncCardsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/BasicResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/HTTPError'
      security:
      - Bearer: []
      summary: Synchronizes cards
      tags:
      - cards
securityDefinitions:
  BasicAuth:
    type: basic
  Bearer:
    description: 'ATTENTION! HOW TO USE: Type "Bearer" followed by a space and a token.
      Example: "Bearer \<token\>".'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
